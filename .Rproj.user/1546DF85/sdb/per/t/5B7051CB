{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nsource(file = 'history_manipulation.R')\n\nlibrary(shiny)\n\nshinyServer(function(input, output, session) {\n\n  values = reactiveValues()  \n  values$actualDate = dates.rng[2]\n\n<<<<<<< HEAD\n\n# +------------------------------------+\n# | Set correct date\n# +------------------------------------+\n  observe({\n     \n    input$dateSlider\n    \n    isolate({\n      \n      actDate = values$actualDate\n      inpDate = input$dateSlider\n      \n      if(nrow(filter(smile.data, tms == inpDate)) == 0){\n        \n        if(inpDate > actDate){\n          \n          corDate = (smile.data %>% filter(tms >= inpDate) %>% filter(tms == min(tms)) %>% select(tms))[[1]]\n        } else {\n          \n          corDate = (smile.data %>% filter(tms <= inpDate) %>% filter(tms == max(tms)) %>% select(tms))[[1]]\n        }\n      } else {\n        \n        corDate = inpDate\n      }\n      \n    })\n\n   \n     values$actualDate = corDate\n\n=======\n  \n# +--------------------------------------+\n# | Update date slider at RTS chart click\n# +--------------------------------------+\n   observe({ \n     \n     clickedRts = nearPoints(rts.data, (input$rts_click), xvar = 'Dates', yvar = 'Close')\n     if(nrow(clickedRts) > 0)\n       inpDate = clickedRts[1, c('Dates'), drop = T]\n\n     updateDateInput(session, inputId = 'dateSlider', value = inpDate, min = dates.rng[1], max = dates.rng[2])\n>>>>>>> origin/master\n  })\n  \n\n\n# +------------------------------------+\n<<<<<<< HEAD\n# | Draw smile chart\n# +------------------------------------+\n  output$smileChart = renderPlot({ \n    \n    try({\n      \n      the.date    = values$actualDate\n      \n      smiles.data = CalcSmilesSeries(strikeRng = input$strikeRngSlider, \n                                     smileDate = the.date, \n                                     nearest = input$nearestNum)\n      \n      rts.point   = rts.data %>% filter(Dates == the.date) %>% select(Close)\n      \n      iv.chart = ggplot(data = smiles.data, aes(x = Strike, y = IV, fill=tdays, alpha=tdays)) + geom_line(size = 1.5, color = 'blue') +\n=======\n# | Set correct date\n# +------------------------------------+\n  observe({\n     \n    input$dateSlider\n    \n    actDate = isolate(values$actualDate)\n    inpDate = isolate(input$dateSlider)\n    \n    print(paste('actDate = ', actDate,', inpDate = ', inpDate,  sep=''))\n\n    \n    if(nrow(filter(smile.data, tms == inpDate)) == 0){\n\n      if(inpDate > actDate){\n        \n        corDate = (smile.data %>% filter(tms >= inpDate) %>% filter(tms == min(tms)) %>% select(tms))[[1]]\n      } else {\n        \n        corDate = (smile.data %>% filter(tms <= inpDate) %>% filter(tms == max(tms)) %>% select(tms))[[1]]\n      }\n    } else {\n      \n      corDate = inpDate\n    }\n   \n     values$actualDate = corDate\n\n  })\n  \n\n\n# +------------------------------------+\n# | Draw smile chart\n# +------------------------------------+\n  output$smileChart = renderPlot({ \n    try({\n      \n      the.date    = values$actualDate\n      smiles.data = CalcSmilesSeries(strikeRng = input$strikeRngSlider, smileDate = the.date, nearest = input$nearestNum)\n      rts.point   = rts.data %>% filter(Dates == the.date) %>% select(Close)\n      \n      iv.chart = ggplot(data = smiles.data, aes(x = Strike, y = IV, fill = tdays, alpha = tdays)) + geom_line(size = 1.5, color = 'blue') +\n>>>>>>> origin/master\n        theme_bw(base_size = 16) + scale_alpha_discrete(name = \"Days til exp\") + theme(legend.position = 'bottom')\n      \n      if(input$checkLimit)\n        iv.chart = iv.chart + scale_y_continuous(limit = c(input$yminNum, input$ymaxNum))\n     \n      iv.chart = iv.chart + geom_vline(xintercept = as.numeric(rts.point$Close[[1]]) * 100, color = 'red', linetype = 'dotted')\n      \n      iv.chart\n    })\n<<<<<<< HEAD\n  }, width = 300, height = 300)\n=======\n  })\n>>>>>>> origin/master\n  \n\n\n# +------------------------------------+\n# | Draw RTS chart\n# +------------------------------------+\n  output$rtsChart = renderPlot({\n<<<<<<< HEAD\n    \n    values$actualDate\n    \n=======\n>>>>>>> origin/master\n    try({\n      \n    chart.data = rts.data %>% filter(Dates >= dates.rng[1] & Dates <= dates.rng[2])\n    \n    ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() + \n      geom_vline(xintercept = as.numeric(values$actualDate), color = 'red', linetype = 'dotted')\n    \n    })\n<<<<<<< HEAD\n  }, width = 500, height = 250)\n  \n  \n  \n# +--------------------------------------+\n# | Update date slider at RTS chart click\n# +--------------------------------------+\n  observe({ \n    \n    clickedRts = nearPoints(rts.data, input$rts_click, xvar = 'Dates', yvar = 'Close')\n=======\n  })\n  \n\n\n  output$rtsPlotText = renderPrint({\n    \n    #str(input$rts_click)\n    \n>>>>>>> origin/master\n    \n    if(nrow(clickedRts) > 0){\n      \n      inpDate = clickedRts[1, c('Dates'), drop = T]\n      updateDateInput(session, inputId = 'dateSlider', value = inpDate, min = dates.rng[1], max = dates.rng[2])\n    }\n  })\n  \n})\n",
    "created" : 1434561040345.000,
    "dirty" : false,
    "encoding" : "CP1251",
    "folds" : "",
    "hash" : "1013308541",
    "id" : "5B7051CB",
    "lastKnownWriteTime" : 1449467006,
    "path" : "~/MyR/HistoricalFortsSmile/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}