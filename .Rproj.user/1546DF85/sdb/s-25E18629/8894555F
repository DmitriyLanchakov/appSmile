{
    "contents" : "\n\n#### Draw smiles at day ###\n\n\nrequire(dplyr)\nrequire(tidyr)\nrequire(ggplot2)\n\n\n# +------------------------------------+\n# | Prepare data\n# +------------------------------------+\n  \n#   rts.data = read.csv('RTSI.txt') %>% select(c(3, 8)) %>% mutate(Dates = as.Date(as.character(X.DATE.), format='%Y%m%d')) %>% select(c(3, 2))\n#   names(rts.data) = c('Dates', 'Close')\n#   save(rts.data, file = 'rtsi.RData')\n\n  load('rtsi.RData')\n  \n#   smile.data = read.csv(file = 'ri_smile.csv', sep = ';', header=T, dec=',') %>% select(c(-1)) \n#   smile.data$tms = as.Date(substr(as.character(smile.data$tms), 0, 10))\n#   save(smile.data, file = 'smile.RData')\n\n  load('smile.RData')\n\n  dates.rng = c(min(smile.data$tms), max(smile.data$tms))\n  \n\n# +------------------------------------+\n# | For each option series calc smile\n# | External variables used: all.data\n# +------------------------------------+\n\n  CalcSmilesSeries = function(strikeRng = 0.2, \n                              smileDate = as.Date('2010-09-06') ){\n    browser()\n  ### Find coefs for intuted date\n    vx.at.date = smile.data %>% filter(tms == smileDate)\n    \n  ### Make strikes range, include futures values\n    rng = strikeRng  \n    strikes = seq(min(vx.at.date$fut_price)*(1-rng), max(vx.at.date$fut_price)*(1+rng), length.out = 50 )\n    strikes = sort(c(strikes, vx.at.date$fut_price))\n    \n  ### Calc smile for every exp.date, strike value\n    smiles = lapply( c(1:nrow(vx.at.date)), function(x){\n      x.row = x\n      sapply(strikes, function(x){\n        strike = x\n        fut    = vx.at.date[x.row, 'fut_price', drop=T]\n        tdays  = vx.at.date[x.row, 't', drop=T] * 250\n        coef.vector = as.vector(vx.at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])\n        vxSmile(strike, fut, tdays, coef.vector, method = 1)\n      })\n    })\n  \n  ### Arrange data for ggplot\n    names(smiles) = as.vector(vx.at.date$small_name)\n    smiles = gather(data = as.data.frame(c(list(strike = strikes), smiles)), key=strike )\n    names(smiles) = c('Strike', 'BaseFutures', 'IV')\n    smiles$BaseFutures = as.character(smiles$BaseFutures)\n    fut.days = vx.at.date %>% select(small_name, t) %>% mutate(tdays = as.factor(round(t * 250, 0))) \n    fut.days$small_name = as.character(fut.days$small_name)\n    #%>% \n    dplyr::left_join(smiles, fut.days, by = c('BaseFutures' = 'small_name'))\n    \n    return(smiles)\n  }\n    \n\n  xtest = CalcSmilesSeries()\n  xtest$BaseFutures = as.character(xtest$BaseFutures)\n  str(xtest)\n\n\n\n# +------------------------------------+\n# | IV smile functions\n# +------------------------------------+\nvxSmile = function(strike, fut, tdays, coef.vector=NULL, method=2)\n{\n  \n  s = try(as.numeric(coef.vector[['s']]), silent = T)\n  a = try(as.numeric(coef.vector[['a']]), silent = T)\n  b = try(as.numeric(coef.vector[['b']]), silent = T)\n  c = try(as.numeric(coef.vector[['c']]), silent = T)\n  d = try(as.numeric(coef.vector[['d']]), silent = T)\n  e = try(as.numeric(coef.vector[['e']]), silent = T)\n  f = try(as.numeric(coef.vector[['f']]), silent = T)\n  g = try(as.numeric(coef.vector[['g']]), silent = T)\n  \n  \n  try({ \n    if(method==1) \n      vxs=a + b*(1 - e ^ ( (-1)*c*( 1/(tdays/365)^0.5 * log(strike / fut)-s )^2 )) +  d * atan(e * (1 / (tdays / 365) ^ 0.5 * log(strike / fut) - s)) / e\n    \n    if(method==2)  \n      vxs =  a + b*(1 - exp(-c * (1 / (tdays / 365) ^ 0.5 * log(strike / fut) - s) ^ 2)) + d * atan(e * (1 / (tdays / 365) ^ 0.5 * log(strike / fut) - s)) / e\n    \n    if(method==3)\n      vxs = a + b*strike + c*strike^2 + d*strike^3 + e*strike^4 + f*strike^5 + g*strike^6\n    \n  }, silent=T)\n  \n  return(as.numeric(vxs))\n  \n}\n\n  \n\n\n",
    "created" : 1434561175874.000,
    "dirty" : true,
    "encoding" : "CP1251",
    "folds" : "",
    "hash" : "2088671492",
    "id" : "8894555F",
    "lastKnownWriteTime" : 1434569742,
    "path" : "~/MyR/appSmile/history_manipulation.R",
    "project_path" : "history_manipulation.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}