{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nsource(file = 'history_manipulation.R')\n\nlibrary(shiny)\n\nshinyServer(function(input, output) {\n\n  values = reactiveValues()  \n  values$actualDate = 0\n  \n  output$dateSlider = renderUI({\n    \n    if(values$actualDate > 0) \n      val = isolate(values$actualDate)\n    else \n      val = dates.rng[2]\n    \n    dateInput('dateSlider', 'Date selector', val, dates.rng[1], dates.rng[2])\n  })\n  \n  \n  theDate = reactive({\n    \n    input$dateSlider\n    \n    actDate = isolate(values$actualDate)\n    inpDate = isolate(input$dateSlider)\n   \n    corDate = inpDate\n    \n    if(nrow(filter(smile.data, tms == inpDate)) > 0){\n         \n      values$actualDate = actDate\n    } else {\n      \n      if(inpDate > actDate){\n        \n        corDate = (smile.data %>% filter(tms >= inpDate) %>% filter(tms == min(tms)) %>% select(tms))[[1]]\n        values$actualDate = corDate\n      } else {\n        \n        corDate = (smile.data %>% filter(tms <= inpDate) %>% filter(tms == max(tms)) %>% select(tms))[[1]]\n        values$actualDate = corDate\n      }\n    }\n   \n    corDate\n  })\n  \n  \n  output$smileChart = renderPlot({\n    \n    try({\n      the.date = theDate()\n      \n      #print(the.date)\n      \n      smiles.data = CalcSmilesSeries(strikeRng = input$strikeRngSlider, smileDate = the.date, nearest = input$nearestNum)\n      \n      rts.point  = rts.data %>% filter(Dates == the.date) %>% select(Close)\n      \n      iv.chart = ggplot(data = smiles.data, aes(x = Strike, y = IV, fill = tdays, alpha = tdays)) + geom_line(size = 1.5, color = 'blue') +\n        theme_bw(base_size = 16) + scale_alpha_discrete(name = \"Days til exp\") + theme(legend.position = 'bottom')\n      \n      \n      if(input$checkLimit)\n        iv.chart = iv.chart + scale_y_continuous(limit = c(input$yminNum, input$ymaxNum))\n     \n      iv.chart = iv.chart + geom_vline(xintercept = as.numeric(rts.point$Close[[1]]) * 100, color = 'red', linetype = 'dotted')\n      \n      iv.chart\n    })\n  })\n  \n  output$rtsChart = renderPlot({\n    try({\n    chart.data = rts.data %>% filter(Dates >= dates.rng[1] & Dates <= dates.rng[2])\n    #the.point  = rts.data %>% filter(Dates == input$dateSlider)\n    ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() + \n      geom_vline(xintercept = as.numeric(theDate()), color = 'red', linetype = 'dotted')\n    \n    })\n  })\n  \n#   output$rtsPlotText = renderPrint({\n#     \n#     #str(input$rts_click)\n#     nearPoints(rts.data, input$rts_click, xvar = 'Dates', yvar = 'Close')\n#     \n#   })\n  \n})\n",
    "created" : 1432300066173.000,
    "dirty" : false,
    "encoding" : "CP1251",
    "folds" : "",
    "hash" : "29538722",
    "id" : "103942F7",
    "lastKnownWriteTime" : 1434719079,
    "path" : "~/RBackup/appSmile/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}