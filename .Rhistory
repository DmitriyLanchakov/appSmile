shiny::runApp()
getwd()
read.csv(file = 'c:\\1\\data\\ri_smile.csv', header = T)
read.csv(file = 'c:\\1\\data\\ri_smile.csv')
read.csv(file = 'c:\\1\\data\\ri_smile.csv', header=F)
local( {
read.csv(file = 'c:\\1\\data\\ri_smile.csv', header=F)
})
all.data
local( {
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', header=F)
all.data
})
local( {
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', header=F)
Vew(all.data)
})
local( {
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', header=F)
View(all.data)
})
local( {
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', sep = ';',header=F)
View(all.data)
})
local( {
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', sep = ';',header=T)
View(all.data)
})
local( {
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', sep = ';',header=T)
View(all.data)
})
require(dplyr)
require(ggplot2)
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', sep = ';',header=T)
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', sep = ';',header=T, dec=',')
all.data = all.data[[-1]]
all.data[[-1]]
all.data[-1]
all.data = all.data[-1]
all.data$tms
droplevels(all.data$tms)
as.character(all.data$tms)
all.data$tms = as.character(all.data$tms)
substr(all.data$tms, 0, 19)
substr( as.character(all.data$tms), 0, 10 )
as.Date( substr( as.character(all.data$tms), 0, 10 ) )
all.data$tms = as.Date( substr( as.character(all.data$tms), 0, 10 ) )
unique(all.data$tms)
getwd()
source(file = 'C:\\Users\\arhipov\\Documents\\RBackup\\.Structure\\deriv_vxsmile.R')
all.data %>% filter(tms==as.Date('2010-09-06'))
at.date = all.data %>% filter(tms==as.Date('2010-09-06'))
sapply(at.date, function(x){
print(x)
})
at.date
sapply(at.date, function(x){
print(x)
})
sapply(c(at.date), function(x){
print(x)
})
sapply(as.list(at.date), function(x){
print(x)
})
nrow(at.date)
sapply( c(1:nrow(at.date)), function(x){
print(x)
})
at.date[1]
at.date[[1]]
at.date
at.date[[c('s', 'a', 'b', 'c', 'd', 'e')]]
at.date[, c('s', 'a', 'b', 'c', 'd', 'e')]
as.vector(at.date[1, c('s', 'a', 'b', 'c', 'd', 'e')])
at.date[1,'fut_price', drop=T]
at.date[1,'t', drop=T]
at.date[1,'t', drop=T]*365
at.date[1,'t', drop=T]*250
require(dplyr)
require(ggplot2)
at.date
sapply( c(1:nrow(at.date)), function(x){
strike = at.date[x,'fut_price', drop=T]
fut    = at.date[x,'fut_price', drop=T]
tdays  = at.date[1,'t', drop=T]*250
coef.vector=as.vector(at.date[x, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
strikes = seq(120000, 170000, 5000)
vx.at.date = all.data %>% filter(tms==as.Date('2010-09-06'))
x.row = 1 #x
sapply(strikes, function(x){
strike = x
fut    = at.date[x.row,'fut_price', drop=T]
tdays  = at.date[1,'t', drop=T]*250
coef.vector = as.vector(at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
library("dplyr", lib.loc="~/R/win-library/3.1")
lapply(strikes, function(x){
strike = x
fut    = at.date[x.row,'fut_price', drop=T]
tdays  = at.date[1,'t', drop=T]*250
coef.vector = as.vector(at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
sapply(strikes, function(x){
strike = x
fut    = at.date[x.row,'fut_price', drop=T]
tdays  = at.date[1,'t', drop=T]*250
coef.vector = as.vector(at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
lapply( c(1:nrow(at.date)), function(x){
strikes = seq(120000, 170000, 5000)
x.row = x
sapply(strikes, function(x){
strike = x
fut    = at.date[x.row,'fut_price', drop=T]
tdays  = at.date[1,'t', drop=T]*250
coef.vector = as.vector(at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
smiles = lapply( c(1:nrow(at.date)), function(x){
strikes = seq(120000, 170000, 5000)
x.row = x
sapply(strikes, function(x){
strike = x
fut    = at.date[x.row,'fut_price', drop=T]
tdays  = at.date[1,'t', drop=T]*250
coef.vector = as.vector(at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
smiles
names(smiles)
vx.at.date
vx.at.date$small_name
vx.at.date$small_name[drop=T]
as.vector(vx.at.date$small_name)
names(smiles) = as.vector(vx.at.date$small_name)
smiles
as.data.frame(smiles)
c(smiles, strikes = strikes)
c(smiles, list(strikes = strikes) )
as.data.frame( c(smiles, list(strikes = strikes) ) )
as.data.frame( c(list(strikes = strikes), smiles ) )
as.tbl( c(list(strikes = strikes), smiles ) )
as.data.frame( c(list(strikes = strikes), smiles ) )
require(dplyr)
require(tidyr)
gather(data = as.data.frame( c(list(strikes = strikes), smiles ) ), key = strikes )
gather(data = as.data.frame( c(list(strikes = strikes), smiles ) ), key = basefut )
gather(data = as.data.frame( c(list(strikes = strikes), smiles ) ), key = RIU0 )
gather(data = as.data.frame( c(list(strikes = strikes), smiles ) ), key = strikes )
gather(data = as.data.frame( c(list(strikes = strikes), smiles ) )  )
gather(data = as.data.frame( c(list(strikes = strikes), smiles ) ), key = strikes )
gather(data = as.data.frame( c(list(strikes = strikes), smiles ) ), value = contains('RI') )
gather(data = as.data.frame( c(list(strikes = strikes), smiles ) ), value = contains(RI) )
gather(data = as.data.frame( c(list(strike = strikes), smiles ) ), key=strike )
smiles = gather(data = as.data.frame( c(list(strike = strikes), smiles ) ), key=strike )
smiles
smiles
names(smiles) = c('Strike', 'BaseFutures', 'IV')
smiles
ggplot(data = smiles, aes(x = Strike, y = IV)) + geom_line()
ggplot(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) + geom_line()
ggplot(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) + geom_point()
ggplot(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) + geom_point() + geom_line()
vx.at.date
vx.at.date$fut_price
c(strikes, vx.at.date$fut_price)
order(c(strikes, vx.at.date$fut_price))
ordered(c(strikes, vx.at.date$fut_price))
sort(c(strikes, vx.at.date$fut_price))
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', sep = ';',header=T, dec=',')
head(all.data)
require(dplyr)
require(tidyr)
require(ggplot2)
source(file = 'C:\\Users\\arhipov\\Documents\\RBackup\\.Structure\\deriv_vxsmile.R')
ggplot(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) + geom_point() + geom_line() +
geom_point(data = strikes)
ggplot(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) + geom_point() + geom_line() +
geom_point(data = as.data.frame(strikes))
smiles
smiles
ggplot(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) + geom_point() + geom_line()
as.data.frame(strikes)
ggplot(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) + geom_point() + geom_line() +
geom_point(data = as.data.frame(strikes), aes(x = strikes, y = 0))
ggplot(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) + geom_point() + geom_line() +
geom_point(data = as.data.frame(strikes), aes(x = strikes, y = 0, color = 'black'))
vx.at.date$fut_price
ggplot(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) + geom_point() + geom_line() +
geom_point(data = as.data.frame(vx.at.date$fut_price), aes(x = strikes, y = 0, color = 'black'))
ggplot() geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) +
geom_point(data = as.data.frame(vx.at.date$fut_price), aes(x = strikes, y = 0, color = 'black'))
ggplot() + geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) +
geom_point(data = as.data.frame(vx.at.date$fut_price), aes(x = strikes, y = 0, color = 'black'))
ggplot() + geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) +
annotate(geom = 'point', x = vx.at.date$fut_price, y = 0, color = 'black')
vx.at.date$fut_price
ggplot() + geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures))
rng = 0.2  # strikes range
strikes = seq(min(vx.at.date$fut_price)*(1-rng), max(vx.at.date$fut_price)*(1+rng), length.out = 50 )
strikes = sort(c(strikes, vx.at.date$fut_price))
smiles = lapply( c(1:nrow(vx.at.date)), function(x){
x.row = x
sapply(strikes, function(x){
strike = x
fut    = at.date[x.row, 'fut_price', drop=T]
tdays  = at.date[1, 't', drop=T]*250
coef.vector = as.vector(vx.at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
names(smiles) = as.vector(vx.at.date$small_name)
smiles = gather(data = as.data.frame( c(list(strike = strikes), smiles ) ), key=strike )
names(smiles) = c('Strike', 'BaseFutures', 'IV')
ggplot() + geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures))
head(all.data)
all.data = all.data[-1]
all.data$tms = as.Date(substr(as.character(all.data$tms), 0, 10))
head(all.data)
min(all.data$tms)
dates.rng = c(min(all.data$tms), max(all.data$tms))
dates.rng
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source(file = 'history_manipulation.R')
source(file = 'history_manipulation.R')
head(all.data)
c(min(all.data$tms), max(all.data$tms))
dates.rng
dates.array = unique(all.data$tms)
dates.array
shiny::runApp()
shiny::runApp()
vx.at.date
print(vx.at.date)
shiny::runApp()
shiny::runApp()
dates.rng[1]
dates.rng[2]
dates.rng[2]
shiny::runApp()
shiny::runApp()
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', sep = ';', header=T, dec=',')
all.data = all.data[-1]
all.data$tms = as.Date(substr(as.character(all.data$tms), 0, 10))
CalcSmilesSeries = function(strikeRng = 0.2,
smileDate = as.Date('2010-09-06') ){
vx.at.date = all.data %>% filter(tms == smileDate)
rng = 0.2  # strikes range
strikes = seq(min(vx.at.date$fut_price)*(1-rng), max(vx.at.date$fut_price)*(1+rng), length.out = 50 )
strikes = sort(c(strikes, vx.at.date$fut_price))
smiles = lapply( c(1:nrow(vx.at.date)), function(x){
x.row = x
sapply(strikes, function(x){
strike = x
fut    = vx.at.date[x.row, 'fut_price', drop=T]
tdays  = vx.at.date[1, 't', drop=T] * 250
coef.vector = as.vector(vx.at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
names(smiles) = as.vector(vx.at.date$small_name)
smiles = gather(data = as.data.frame(c(list(strike = strikes), smiles)), key=strike )
names(smiles) = c('Strike', 'BaseFutures', 'IV')
return(smiles)
}
CalcSmilesSeries()
source(file = 'C:\\Users\\arhipov\\Documents\\RBackup\\.Structure\\deriv_vxsmile.R')
CalcSmilesSeries()
shiny::runApp()
shiny::runApp()
shiny::runApp()
