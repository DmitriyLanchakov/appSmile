ggplot() geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) +
geom_point(data = as.data.frame(vx.at.date$fut_price), aes(x = strikes, y = 0, color = 'black'))
ggplot() + geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) +
geom_point(data = as.data.frame(vx.at.date$fut_price), aes(x = strikes, y = 0, color = 'black'))
ggplot() + geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures)) +
annotate(geom = 'point', x = vx.at.date$fut_price, y = 0, color = 'black')
vx.at.date$fut_price
ggplot() + geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures))
rng = 0.2  # strikes range
strikes = seq(min(vx.at.date$fut_price)*(1-rng), max(vx.at.date$fut_price)*(1+rng), length.out = 50 )
strikes = sort(c(strikes, vx.at.date$fut_price))
smiles = lapply( c(1:nrow(vx.at.date)), function(x){
x.row = x
sapply(strikes, function(x){
strike = x
fut    = at.date[x.row, 'fut_price', drop=T]
tdays  = at.date[1, 't', drop=T]*250
coef.vector = as.vector(vx.at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
names(smiles) = as.vector(vx.at.date$small_name)
smiles = gather(data = as.data.frame( c(list(strike = strikes), smiles ) ), key=strike )
names(smiles) = c('Strike', 'BaseFutures', 'IV')
ggplot() + geom_line(data = smiles, aes(x = Strike, y = IV, color = BaseFutures))
head(all.data)
all.data = all.data[-1]
all.data$tms = as.Date(substr(as.character(all.data$tms), 0, 10))
head(all.data)
min(all.data$tms)
dates.rng = c(min(all.data$tms), max(all.data$tms))
dates.rng
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source(file = 'history_manipulation.R')
source(file = 'history_manipulation.R')
head(all.data)
c(min(all.data$tms), max(all.data$tms))
dates.rng
dates.array = unique(all.data$tms)
dates.array
shiny::runApp()
shiny::runApp()
vx.at.date
print(vx.at.date)
shiny::runApp()
shiny::runApp()
dates.rng[1]
dates.rng[2]
dates.rng[2]
shiny::runApp()
shiny::runApp()
all.data = read.csv(file = 'c:\\1\\data\\ri_smile.csv', sep = ';', header=T, dec=',')
all.data = all.data[-1]
all.data$tms = as.Date(substr(as.character(all.data$tms), 0, 10))
CalcSmilesSeries = function(strikeRng = 0.2,
smileDate = as.Date('2010-09-06') ){
vx.at.date = all.data %>% filter(tms == smileDate)
rng = 0.2  # strikes range
strikes = seq(min(vx.at.date$fut_price)*(1-rng), max(vx.at.date$fut_price)*(1+rng), length.out = 50 )
strikes = sort(c(strikes, vx.at.date$fut_price))
smiles = lapply( c(1:nrow(vx.at.date)), function(x){
x.row = x
sapply(strikes, function(x){
strike = x
fut    = vx.at.date[x.row, 'fut_price', drop=T]
tdays  = vx.at.date[1, 't', drop=T] * 250
coef.vector = as.vector(vx.at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
names(smiles) = as.vector(vx.at.date$small_name)
smiles = gather(data = as.data.frame(c(list(strike = strikes), smiles)), key=strike )
names(smiles) = c('Strike', 'BaseFutures', 'IV')
return(smiles)
}
CalcSmilesSeries()
source(file = 'C:\\Users\\arhipov\\Documents\\RBackup\\.Structure\\deriv_vxsmile.R')
CalcSmilesSeries()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
CalcSmilesSeries()
vx.at.date = all.data %>% filter(tms == smileDate)
all.data %>% filter(tms ==  as.Date('2010-09-06'))
all.data %>% filter(tms ==  as.Date('2010-09-06')) %>% select(small_name, t)
all.data %>% filter(tms ==  as.Date('2010-09-06')) %>% select(small_name, t) %>% mutate(t*250)
all.data %>% filter(tms ==  as.Date('2010-09-06')) %>% select(small_name, t) %>% mutate(tdays = t*250)
require(dplyr)
require(tidyr)
require(ggplot2)
require(dplyr)
library("dplyr", lib.loc="~/R/win-library/3.1")
all.data %>% filter(tms ==  as.Date('2010-09-06')) %>% select(small_name, t) %>%
mutate(tdays = t*250) %>% right_join(CalcSmilesSeries(), by = c('BaseFutures', 'small_name'))
all.data %>% filter(tms ==  as.Date('2010-09-06')) %>% select(small_name, t) %>%
mutate(tdays = t*250) %>% right_join(., CalcSmilesSeries(), by = c('BaseFutures', 'small_name'))
tojoin = all.data %>% filter(tms ==  as.Date('2010-09-06')) %>% select(small_name, t) %>%
mutate(tdays = t*250)
tojoin
right_join(tojoin, CCalcSmilesSeries(), by = c('small_name', 'BaseFutures'))
right_join(tojoin, CalcSmilesSeries(), by = c('small_name', 'BaseFutures'))
CalcSmilesSeries()
right_join(tojoin, CalcSmilesSeries(), by = c('small_name'= 'BaseFutures'))
all.data %>% filter(tms ==  as.Date('2010-09-06')) %>% select(small_name, t) %>%
mutate(tdays = t*250) %>% right_join(tojoin, CalcSmilesSeries(), by = c('small_name'= 'BaseFutures'))
all.data %>% filter(tms ==  as.Date('2010-09-06')) %>% select(small_name, t) %>%
mutate(tdays = t*250) %>% right_join( CalcSmilesSeries(), by = c('small_name'= 'BaseFutures'))
CalcSmilesSeries = function(strikeRng = 0.2,
smileDate = as.Date('2010-09-06') ){
### Find coefs for intuted date
vx.at.date = all.data %>% filter(tms == smileDate)
### Make strikes range, include futures values
rng = strikeRng
strikes = seq(min(vx.at.date$fut_price)*(1-rng), max(vx.at.date$fut_price)*(1+rng), length.out = 50 )
strikes = sort(c(strikes, vx.at.date$fut_price))
### Calc smile for every exp.date, strike value
smiles = lapply( c(1:nrow(vx.at.date)), function(x){
x.row = x
sapply(strikes, function(x){
strike = x
fut    = vx.at.date[x.row, 'fut_price', drop=T]
tdays  = vx.at.date[x.row, 't', drop=T] * 250
coef.vector = as.vector(vx.at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
### Arrange data for ggplot
names(smiles) = as.vector(vx.at.date$small_name)
smiles = gather(data = as.data.frame(c(list(strike = strikes), smiles)), key=strike )
names(smiles) = c('Strike', 'BaseFutures', 'IV')
smiles = vx.at.date %>% select(small_name, t) %>%
mutate(tdays = t*250) %>% right_join( smiles, by = c('small_name'= 'BaseFutures'))
return(smiles)
}
CalcSmilesSeries()
shiny::runApp()
shiny::runApp()
CalcSmilesSeries()
CalcSmilesSeries = function(strikeRng = 0.2,
smileDate = as.Date('2010-09-06') ){
### Find coefs for intuted date
vx.at.date = all.data %>% filter(tms == smileDate)
### Make strikes range, include futures values
rng = strikeRng
strikes = seq(min(vx.at.date$fut_price)*(1-rng), max(vx.at.date$fut_price)*(1+rng), length.out = 50 )
strikes = sort(c(strikes, vx.at.date$fut_price))
### Calc smile for every exp.date, strike value
smiles = lapply( c(1:nrow(vx.at.date)), function(x){
x.row = x
sapply(strikes, function(x){
strike = x
fut    = vx.at.date[x.row, 'fut_price', drop=T]
tdays  = vx.at.date[x.row, 't', drop=T] * 250
coef.vector = as.vector(vx.at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
### Arrange data for ggplot
names(smiles) = as.vector(vx.at.date$small_name)
smiles = gather(data = as.data.frame(c(list(strike = strikes), smiles)), key=strike )
names(smiles) = c('Strike', 'BaseFutures', 'IV')
smiles = vx.at.date %>% select(small_name, t) %>%
mutate(tdays = t*250) %>% left_join( smiles, by = c('small_name'= 'BaseFutures'))
return(smiles)
}
CalcSmilesSeries()
CalcSmilesSeries = function(strikeRng = 0.2,
smileDate = as.Date('2010-09-06') ){
### Find coefs for intuted date
vx.at.date = all.data %>% filter(tms == smileDate)
### Make strikes range, include futures values
rng = strikeRng
strikes = seq(min(vx.at.date$fut_price)*(1-rng), max(vx.at.date$fut_price)*(1+rng), length.out = 50 )
strikes = sort(c(strikes, vx.at.date$fut_price))
### Calc smile for every exp.date, strike value
smiles = lapply( c(1:nrow(vx.at.date)), function(x){
x.row = x
sapply(strikes, function(x){
strike = x
fut    = vx.at.date[x.row, 'fut_price', drop=T]
tdays  = vx.at.date[x.row, 't', drop=T] * 250
coef.vector = as.vector(vx.at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
### Arrange data for ggplot
names(smiles) = as.vector(vx.at.date$small_name)
smiles = gather(data = as.data.frame(c(list(strike = strikes), smiles)), key=strike )
names(smiles) = c('Strike', 'BaseFutures', 'IV')
smiles = vx.at.date %>% select(small_name, t) %>%
mutate(tdays = t*250) %>% left_join( smiles, by = c('BaseFutures' = 'small_name'))
return(smiles)
}
CalcSmilesSeries()
CalcSmilesSeries = function(strikeRng = 0.2,
smileDate = as.Date('2010-09-06') ){
### Find coefs for intuted date
vx.at.date = all.data %>% filter(tms == smileDate)
### Make strikes range, include futures values
rng = strikeRng
strikes = seq(min(vx.at.date$fut_price)*(1-rng), max(vx.at.date$fut_price)*(1+rng), length.out = 50 )
strikes = sort(c(strikes, vx.at.date$fut_price))
### Calc smile for every exp.date, strike value
smiles = lapply( c(1:nrow(vx.at.date)), function(x){
x.row = x
sapply(strikes, function(x){
strike = x
fut    = vx.at.date[x.row, 'fut_price', drop=T]
tdays  = vx.at.date[x.row, 't', drop=T] * 250
coef.vector = as.vector(vx.at.date[x.row, c('s', 'a', 'b', 'c', 'd', 'e')])
vxSmile(strike, fut, tdays, coef.vector)
})
})
### Arrange data for ggplot
names(smiles) = as.vector(vx.at.date$small_name)
smiles = gather(data = as.data.frame(c(list(strike = strikes), smiles)), key=strike )
names(smiles) = c('Strike', 'BaseFutures', 'IV')
smiles = vx.at.date %>% select(small_name, t) %>%
mutate(tdays = t*250) %>% left_join(smiles, by = c('small_name' = 'BaseFutures'))
return(smiles)
}
CalcSmilesSeries()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
CalcSmilesSeries()
shiny::runApp()
shiny::runApp()
library("scales", lib.loc="~/R/win-library/3.1")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('RCurl')
update.packages('shinyapps')
install.packages("shiny")
all.data = read.csv(file = 'ri_smile.csv', sep = ';', header=T, dec=',')
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
rts.data = read.txt('RTSI.txt')
rts.data = read.csv('RTSI.txt')
head(rts.data)
read.csv('RTSI.txt') %>% select(c(3, 6))
read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mudate(Dates = as.character(X.DATE))
read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mutate(Dates = as.character(X.DATE))
rts.data
head(rts.data)
read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mutate(Dates = as.character(X.DATE.))
read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mutate(Dates = as.Date(as.character(X.DATE.)), format='%Y%M%d')
read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mutate(Dates = as.Date(as.character(X.DATE.)), format='%Y%m%d')
read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mutate(Dates = as.Date(as.character(X.DATE.)))
rts.data = read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mutate(as.Date(as.character(X.DATE.), format='%Y%m%d'))
read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mutate(Dates = as.Date(as.character(X.DATE.), format='%Y%m%d'))
read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mutate(Dates = as.Date(as.character(X.DATE.), format='%Y%m%d')) %>%
select(c(3, 2))
rts.data = read.csv('RTSI.txt') %>% select(c(3, 6)) %>% mutate(Dates = as.Date(as.character(X.DATE.), format='%Y%m%d')) %>%
select(c(3, 2))
head(rts.data)
head(read.csv('RTSI.txt'))
rts.data = read.csv('RTSI.txt') %>% select(c(3, 8)) %>% mutate(Dates = as.Date(as.character(X.DATE.), format='%Y%m%d')) %>%
select(c(3, 2))
head(rts.data)
read.csv('RTSI.txt') %>% select(c(3, 8)) %>% mutate(Dates = as.Date(as.character(X.DATE.), format='%Y%m%d')) %>%
select(c(3, 2)) %>% names(.) = c('Dates', 'Close')
rts.data = read.csv('RTSI.txt') %>% select(c(3, 8)) %>% mutate(Dates = as.Date(as.character(X.DATE.), format='%Y%m%d')) %>%
select(c(3, 2))
names(rts.data) = c('Dates', 'Close')
head(rts.data)
save(file = rtsi.RData)
save(file = 'rtsi.RData')
save(rts.data, file = 'rtsi.RData')
rm(rts.data)
data(rts.data)
load('rtsi.RData')
smile.data = read.csv(file = 'ri_smile.csv', sep = ';', header=T, dec=',')
smile.data = read.csv(file = 'ri_smile.csv', sep = ';', header=T, dec=',') %>% select(c(-1))
smile.data$tms = as.Date(substr(as.character(smile.data$tms), 0, 10))
save(smile.data, file = 'smile.RData')
rm(all.data, smile.data)
load('smile.RData')
rm(tojoin)
shiny::runApp()
dates.rng[1]
rts.data %>% filter(Dates >= dates.rng[1] & Dates <= dates.rng[2])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rts.data %>% filter(Dates == as.Date('2010-09-06'))
shiny::runApp()
the.point = rts.data %>% filter(Dates == as.Date('2010-09-06'))
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() + geom_point(x = the.point$Dates, y = the.point$Close)
chart.data = rts.data %>% filter(Dates >= dates.rng[1] & Dates <= dates.rng[2])
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() + geom_point(x = the.point$Dates, y = the.point$Close)
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() +
geom_point(data = the.point, aes(x = the.point$Dates, y = the.point$Close))
shiny::runApp()
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() +
geom_point(data = the.point, aes(x = the.point$Dates, y = the.point$Close, color = 'red'))
the.point = rts.data %>% filter(Dates == as.Date('2011-09-06'))
the.point
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() +
geom_point(data = the.point, aes(x = the.point$Dates, y = the.point$Close, color = 'red'))
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() +
geom_vline(data = the.point, aes(x = the.point$Dates, color = 'red'))
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() +
geom_vline(data = the.point, x = the.point$Dates, color = 'red')
shiny::runApp()
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() +
geom_vline(xintercept = the.point$Dates, color = 'red')
the.point$Dates
as.numeric(the.point$Dates)
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() +
geom_vline(xintercept = as.numeric(the.point$Dates), color = 'red')
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() +
geom_vline(xintercept = as.numeric(the.point$Dates), color = 'red', style = 'dotted')
ggplot(data = chart.data, aes(x = Dates, y = Close) ) + geom_line() +
geom_vline(xintercept = as.numeric(the.point$Dates), color = 'red', linetype = 'dotted')
shiny::runApp()
rm(the.point)
shiny::runApp()
rts.data %>% select(min(Close))
rts.data %>% filter(min(Close))
rts.data %>% filter(Close == min(Close))
rts.data %>% filter(Close == min(Close-1000))
rts.data %>% filter(Close>1000)
rts.data %>% filter(Close>1000) %>% filter(min(Close))
rts.data %>% filter(Close>1000) %>% filter(Close = min(Close))
rts.data %>% filter(Close>1000) %>% filter(Close == min(Close))
as.vector(rts.data %>% filter(Close>1000) %>% filter(Close == min(Close)))
as.vector(rts.data %>% filter(Close>1000) %>% filter(Close == min(Close)) %>% select(Dates))
(rts.data %>% filter(Close>1000) %>% filter(Close == min(Close)) %>% select(Dates))[drop = T]
(rts.data %>% filter(Close>1000) %>% filter(Close == min(Close)) %>% select(Dates))
(rts.data %>% filter(Close>1000) %>% filter(Close == min(Close)) %>% select(Dates))[[1]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
CalcSmilesSeries()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
require(dplyr)
require(tidyr)
require(ggplot2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
CalcSmileSeries()
CalcSmilesSeries()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
